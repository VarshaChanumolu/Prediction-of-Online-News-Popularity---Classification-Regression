# -*- coding: utf-8 -*-
"""Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13fP3tt52u0IAKkM7vQR18gaTqO54kmvI
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
pd.set_option('display.max_columns', None)

Onews = pd.read_csv('OnlineNewsPopularity.csv')
Onews.head()

Onews.columns = Onews.columns.str.replace(' ', '')

Onews = Onews.drop(['url'], axis = 1)

Onews = Onews[Onews['n_tokens_content'] != 0]
Onews.shape

Onews = Onews[Onews['kw_min_min'] != -1]
Onews.shape

OnewsN = Onews.drop(['self_reference_min_shares','self_reference_max_shares', 'self_reference_avg_sharess'], axis = 1)
OnewsN.shape

OnewsN = OnewsN.drop(['is_weekend'], axis = 1)
OnewsN.shape

def outliers(df, columns = None):
    if not columns:
        columns = df.columns
    
    for c in columns:
        Q1 = df[c].quantile(0.25)
        Q3 = df[c].quantile(0.75)
        IQR = Q3 - Q1
        floor, ceil = Q1 - 1.5*IQR, Q3 + 1.5*IQR
        
        df = df[(df[c] >= floor) & (df[c] <= ceil)]
    return df

OnewsNew = outliers(OnewsN,['shares'])

import seaborn as sns

sns.boxplot(OnewsNew['shares'])

OnewsNew1 = outliers(OnewsNew, ['shares'])
sns.boxplot(OnewsNew1['shares'])

OnewsNew2 = outliers(OnewsNew1, ['shares'])
sns.boxplot(OnewsNew2['shares'])

col = ['n_tokens_content', 
      'n_unique_tokens',
      'kw_max_max', 'kw_max_min', 'kw_max_avg',
      'rate_positive_words', 'rate_negative_words',
      'avg_negative_polarity','avg_positive_polarity','title_subjectivity']

OnewsNew3 = OnewsNew2.drop(col, axis = 1)

from sklearn.model_selection import train_test_split

X = OnewsNew3.drop(['shares'], axis = 1)
Y = OnewsNew3[['shares']]

X_train, X_test, y_train, y_test = train_test_split(X, Y, train_size = 0.7, random_state = 100)

"""## Lasso"""

from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from sklearn.model_selection import cross_val_score,RepeatedKFold,GridSearchCV

lasso = Lasso(normalize = True, alpha = 0.2)
lasso.fit(X_train, y_train)
y_pred = lasso.predict(X_test)
r2_score(y_test, y_pred)

lasso = Lasso(normalize = True)

cv = RepeatedKFold(n_splits = 100, n_repeats = 2)
grid = {}
grid['alpha'] = np.arange(0, 0.05, 0.01)

search = GridSearchCV(lasso, grid,scoring = "neg_mean_absolute_error", cv = cv, n_jobs = -1 )


res = search.fit(X, Y)

search.best_estimator_

#lassoBest = Lasso(normalize = True, alpha = 0)
lassoBest = search.best_estimator_
lassoBest.fit(X_train, y_train)
y_pred = lassoBest.predict(X_test)
r2_score(y_test, y_pred)

lassoBest.coef_

OnewsNew2.info()

"""## Multiple Linear Regression"""

from sklearn.linear_model import LinearRegression

lReg = LinearRegression(normalize = True)
lReg.fit(X_train, y_train)
y_pred = lReg.predict(X_test)

r2_score(y_test, y_pred)

lReg.score(X_train, y_train), lReg.score(X_test, y_test)

lReg.coef_